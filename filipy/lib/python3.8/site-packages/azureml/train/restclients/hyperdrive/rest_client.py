# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from . import models


class RestClientConfiguration(Configuration):
    """Configuration for RestClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param arm_scope:
    :type arm_scope: str
    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, arm_scope, credentials, base_url=None):

        if arm_scope is None:
            raise ValueError("Parameter 'arm_scope' must not be None.")
        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'http://hyperdrive/hyperdrive/v1.0'

        super(RestClientConfiguration, self).__init__(base_url)

        self.add_user_agent('Hyperdrive.Service/{}'.format(VERSION))

        self.arm_scope = arm_scope
        self.credentials = credentials


class RestClient(object):
    """HyperDrive REST API

    :ivar config: Configuration for client.
    :vartype config: RestClientConfiguration

    :param arm_scope:
    :type arm_scope: str
    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, arm_scope, credentials, base_url=None):

        self.config = RestClientConfiguration(arm_scope, credentials, base_url)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1.0.0'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def create_experiment(
            self, config, custom_headers=None, raw=False, **operation_config):
        """

        :param config:
        :type config: Generator
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ExperimentResponseDto or ClientRawResponse if raw=true
        :rtype: ~hyperdrive.models.ExperimentResponseDto or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<hyperdrive.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.create_experiment.metadata['url']
        path_format_arguments = {
            'arm_scope': self._serialize.url("self.config.arm_scope", self.config.arm_scope, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'multipart/form-data'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct form data
        form_data_content = {
            'config': config,
        }

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send_formdata(
            request, header_parameters, form_data_content, stream=False, **operation_config)

        if response.status_code not in [201]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('ExperimentResponseDto', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_experiment.metadata = {'url': '/{arm_scope}/runs'}

    def create_experiment1(
            self, run_id, config, custom_headers=None, raw=False, **operation_config):
        """

        :param run_id:
        :type run_id: str
        :param config:
        :type config: Generator
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ExperimentResponseDto or ClientRawResponse if raw=true
        :rtype: ~hyperdrive.models.ExperimentResponseDto or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<hyperdrive.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.create_experiment1.metadata['url']
        path_format_arguments = {
            'arm_scope': self._serialize.url("self.config.arm_scope", self.config.arm_scope, 'str'),
            'run_id': self._serialize.url("run_id", run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'multipart/form-data'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct form data
        form_data_content = {
            'config': config,
        }

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send_formdata(
            request, header_parameters, form_data_content, stream=False, **operation_config)

        if response.status_code not in [201]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('ExperimentResponseDto', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_experiment1.metadata = {'url': '/{arm_scope}/runs/{run_id}'}

    def cancel_experiment(
            self, run_id, run_history_host, custom_headers=None, raw=False, **operation_config):
        """

        :param run_id:
        :type run_id: str
        :param run_history_host:
        :type run_history_host: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CancelExperimentResposeDto or ClientRawResponse if raw=true
        :rtype: ~hyperdrive.models.CancelExperimentResposeDto or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<hyperdrive.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.cancel_experiment.metadata['url']
        path_format_arguments = {
            'arm_scope': self._serialize.url("self.config.arm_scope", self.config.arm_scope, 'str'),
            'run_id': self._serialize.url("run_id", run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['RunHistoryHost'] = self._serialize.header("run_history_host", run_history_host, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CancelExperimentResposeDto', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    cancel_experiment.metadata = {'url': '/{arm_scope}/runs/{run_id}/cancel'}
