# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from . import models
from .models import ErrorResponseException


class AMLPipelinesAPI10Configuration(Configuration):
    """Configuration for AMLPipelinesAPI10
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        if not base_url:
            base_url = 'http://localhost'

        super(AMLPipelinesAPI10Configuration, self).__init__(base_url)

        self.add_user_agent('amlpipelinesapi10/{}'.format(VERSION))


class AMLPipelinesAPI10(object):
    """AMLPipelinesAPI10

    :ivar config: Configuration for client.
    :vartype config: AMLPipelinesAPI10Configuration

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        self.config = AMLPipelinesAPI10Configuration(base_url)
        self._client = ServiceClient(None, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1.0'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

    def create_azure_ml_module_async(
            self, subscription_id, resource_group_name, workspace_name, creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreateAzureMLModuleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param creation_info: The module creation info
        :type creation_info: ~swagger.models.AzureMLModuleCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AzureMLModule or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AzureMLModule or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.create_azure_ml_module_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if creation_info is not None:
            body_content = self._serialize.body(creation_info, 'AzureMLModuleCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AzureMLModule', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_azure_ml_module_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/AzureMLModules'}

    def get_azure_ml_module_async(
            self, subscription_id, resource_group_name, workspace_name, id, custom_headers=None, raw=False, **operation_config):
        """GetAzureMLModuleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The module id
        :type id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AzureMLModule or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AzureMLModule or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.get_azure_ml_module_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AzureMLModule', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_azure_ml_module_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/AzureMLModules/{id}'}

    def update_azure_ml_module_async(
            self, subscription_id, resource_group_name, workspace_name, id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdateAzureMLModuleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The module id
        :type id: str
        :param updated: The Module
        :type updated: ~swagger.models.AzureMLModule
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AzureMLModule or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AzureMLModule or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.update_azure_ml_module_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'AzureMLModule')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AzureMLModule', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    update_azure_ml_module_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/AzureMLModules/{id}'}

    def get_azure_ml_module_by_name_async(
            self, subscription_id, resource_group_name, workspace_name, name=None, custom_headers=None, raw=False, **operation_config):
        """GetAzureMLModuleByNameAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param name: The AzureMLModule name
        :type name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AzureMLModule or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AzureMLModule or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.get_azure_ml_module_by_name_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if name is not None:
            query_parameters['name'] = self._serialize.query("name", name, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AzureMLModule', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_azure_ml_module_by_name_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/AzureMLModules/Name'}

    def create_azure_ml_module_version_async(
            self, subscription_id, resource_group_name, workspace_name, creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreateAzureMLModuleVersionAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param creation_info: The module creation info
        :type creation_info: ~swagger.models.AzureMLModuleVersionCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AzureMLModuleVersion or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AzureMLModuleVersion or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.create_azure_ml_module_version_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if creation_info is not None:
            body_content = self._serialize.body(creation_info, 'AzureMLModuleVersionCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AzureMLModuleVersion', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_azure_ml_module_version_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/AzureMLModuleVersions'}

    def get_azure_ml_module_version_async(
            self, subscription_id, resource_group_name, workspace_name, id, custom_headers=None, raw=False, **operation_config):
        """GetAzureMLModuleVersionAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The module id
        :type id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AzureMLModuleVersion or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AzureMLModuleVersion or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.get_azure_ml_module_version_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AzureMLModuleVersion', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_azure_ml_module_version_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/AzureMLModuleVersions/{id}'}

    def update_azure_ml_module_version_async(
            self, subscription_id, resource_group_name, workspace_name, id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdateAzureMLModuleVersionAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The module id
        :type id: str
        :param updated: The Module
        :type updated: ~swagger.models.AzureMLModuleVersion
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AzureMLModuleVersion or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AzureMLModuleVersion or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.update_azure_ml_module_version_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'AzureMLModuleVersion')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AzureMLModuleVersion', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    update_azure_ml_module_version_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/AzureMLModuleVersions/{id}'}


    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_post(
            self, subscription_id, resource_group_name, workspace_name, creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreateDataSourceAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param creation_info: The datasource creation info
        :type creation_info: ~swagger.models.DataSourceCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DataSourceEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DataSourceEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if creation_info is not None:
            body_content = self._serialize.body(creation_info, 'DataSourceCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DataSourceEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/DataSources'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_by_data_source_id_put(
            self, subscription_id, resource_group_name, workspace_name, data_source_id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdateDataSourceAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param data_source_id: The datasource id
        :type data_source_id: str
        :param updated: The updated datasource entity
        :type updated: ~swagger.models.DataSourceEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DataSourceEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DataSourceEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_by_data_source_id_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'dataSourceId': self._serialize.url("data_source_id", data_source_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'DataSourceEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DataSourceEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_by_data_source_id_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/DataSources/{dataSourceId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_by_id_get(
            self, subscription_id, resource_group_name, workspace_name, id, custom_headers=None, raw=False, **operation_config):
        """GetDataSourceAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The datasource id
        :type id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DataSourceEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DataSourceEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_by_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DataSourceEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_by_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/DataSources/{id}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_hash_by_hash_get(
            self, subscription_id, resource_group_name, workspace_name, hash, custom_headers=None, raw=False, **operation_config):
        """GetDataSourceByHashAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param hash: The datasource identiferhash
        :type hash: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DataSourceEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DataSourceEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_hash_by_hash_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'hash': self._serialize.url("hash", hash, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DataSourceEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_sources_hash_by_hash_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/DataSources/Hash/{hash}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_get(
            self, subscription_id, resource_group_name, workspace_name, custom_headers=None, raw=False, **operation_config):
        """GetAllDataTypesAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.DataTypeEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[DataTypeEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/DataTypes'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_post(
            self, subscription_id, resource_group_name, workspace_name, creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreateNewDataTypeAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param creation_info: The DataTypeEntity creation info
        :type creation_info: ~swagger.models.DataTypeCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DataTypeEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DataTypeEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if creation_info is not None:
            body_content = self._serialize.body(creation_info, 'DataTypeCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DataTypeEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/DataTypes'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_by_id_put(
            self, subscription_id, resource_group_name, workspace_name, id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdateDataTypeAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The DataTypeEntity id
        :type id: str
        :param updated: The DataTypeEntity to update
        :type updated: ~swagger.models.DataTypeEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DataTypeEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.DataTypeEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_by_id_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'DataTypeEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DataTypeEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_data_types_by_id_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/DataTypes/{id}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_graphs_by_graph_id_get(
            self, subscription_id, resource_group_name, workspace_name, graph_id, custom_headers=None, raw=False, **operation_config):
        """GetGraphAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param graph_id: The graph id
        :type graph_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GraphEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.GraphEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_graphs_by_graph_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'graphId': self._serialize.url("graph_id", graph_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GraphEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_graphs_by_graph_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Graphs/{graphId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_graphs_by_graph_id_interface_get(
            self, subscription_id, resource_group_name, workspace_name, graph_id, custom_headers=None, raw=False, **operation_config):
        """GetGraphInterfaceAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param graph_id: The graph id
        :type graph_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: EntityInterface or ClientRawResponse if raw=true
        :rtype: ~swagger.models.EntityInterface or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_graphs_by_graph_id_interface_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'graphId': self._serialize.url("graph_id", graph_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('EntityInterface', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_graphs_by_graph_id_interface_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Graphs/{graphId}/Interface'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_post(
            self, subscription_id, resource_group_name, workspace_name, creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreateModuleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param creation_info: The module creation info
        :type creation_info: ~swagger.models.ModuleCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ModuleEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.ModuleEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if creation_info is not None:
            body_content = self._serialize.body(creation_info, 'ModuleCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Modules'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_by_id_get(
            self, subscription_id, resource_group_name, workspace_name, id, custom_headers=None, raw=False, **operation_config):
        """GetModuleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The module id
        :type id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Module or ClientRawResponse if raw=true
        :rtype: ~swagger.models.Module or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_by_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Module', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_by_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Modules/{id}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_by_id_put(
            self, subscription_id, resource_group_name, workspace_name, id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdateModuleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The module id
        :type id: str
        :param updated: The Module
        :type updated: ~swagger.models.ModuleEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ModuleEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.ModuleEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_by_id_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'ModuleEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_by_id_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Modules/{id}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_hash_by_identifier_hash_get(
            self, subscription_id, resource_group_name, workspace_name, identifier_hash, custom_headers=None, raw=False, **operation_config):
        """GetModuleByHashAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param identifier_hash: The module identifierHash
        :type identifier_hash: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Module or ClientRawResponse if raw=true
        :rtype: ~swagger.models.Module or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_hash_by_identifier_hash_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'identifierHash': self._serialize.url("identifier_hash", identifier_hash, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Module', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_modules_hash_by_identifier_hash_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Modules/Hash/{identifierHash}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_submit_by_pipeline_run_id_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, parent_run_id=None, custom_headers=None, raw=False, **operation_config):
        """SubmitSavedPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param parent_run_id: The id of the parent run of this pipeline,
         optional
        :type parent_run_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_submit_by_pipeline_run_id_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if parent_run_id is not None:
            query_parameters['parentRunId'] = self._serialize.query("parent_run_id", parent_run_id, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_submit_by_pipeline_run_id_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/Submit/{pipelineRunId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_submit_by_pipeline_run_id_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, parent_run_id=None, custom_headers=None, raw=False, **operation_config):
        """SubmitSavedPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param parent_run_id: The run name of the parent run of this pipeline,
         optional
        :type parent_run_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_submit_by_pipeline_run_id_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if parent_run_id is not None:
            query_parameters['parentRunId'] = self._serialize.query("parent_run_id", parent_run_id, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_submit_by_pipeline_run_id_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/Submit/{pipelineRunId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_unsubmitted_creation_info_with_graph_post(
            self, subscription_id, resource_group_name, workspace_name, experiment_name=None, creation_info_with_graph=None, custom_headers=None, raw=False, **operation_config):
        """CreateUnsubmittedPipelineRunWithGraphAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param experiment_name: The experiment name
        :type experiment_name: str
        :param creation_info_with_graph: The pipeline run creation info
        :type creation_info_with_graph:
         ~swagger.models.PipelineRunCreationInfoWithGraph
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_unsubmitted_creation_info_with_graph_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if experiment_name is not None:
            query_parameters['experimentName'] = self._serialize.query("experiment_name", experiment_name, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if creation_info_with_graph is not None:
            body_content = self._serialize.body(creation_info_with_graph, 'PipelineRunCreationInfoWithGraph')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_unsubmitted_creation_info_with_graph_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/Unsubmitted/CreationInfoWithGraph'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_unsubmitted_creation_info_with_graph_post(
            self, subscription_id, resource_group_name, workspace_name, experiment_name=None, creation_info_with_graph=None, custom_headers=None, raw=False, **operation_config):
        """CreateUnsubmittedPipelineRunWithGraphAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param experiment_name: The experiment name
        :type experiment_name: str
        :param creation_info_with_graph: The pipeline run creation info
        :type creation_info_with_graph:
         ~swagger.models.PipelineRunCreationInfoWithGraph
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_unsubmitted_creation_info_with_graph_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if experiment_name is not None:
            query_parameters['experimentName'] = self._serialize.query("experiment_name", experiment_name, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if creation_info_with_graph is not None:
            body_content = self._serialize.body(creation_info_with_graph, 'PipelineRunCreationInfoWithGraph')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_unsubmitted_creation_info_with_graph_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/Unsubmitted/CreationInfoWithGraph'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_get(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, custom_headers=None, raw=False, **operation_config):
        """GetPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_put(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdateUnsubmittedPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param updated: The pipeline run
        :type updated: ~swagger.models.PipelineRunEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'PipelineRunEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_get(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, custom_headers=None, raw=False, **operation_config):
        """GetPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_put(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdateUnsubmittedPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param updated: The pipeline run
        :type updated: ~swagger.models.PipelineRunEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'PipelineRunEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_execution_delete(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, custom_headers=None, raw=False, **operation_config):
        """CancelPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_execution_delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_execution_delete.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Execution'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_execution_delete(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, custom_headers=None, raw=False, **operation_config):
        """CancelPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_execution_delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_execution_delete.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Execution'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_all_nodes_status_code_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetAllNodesInLevelStatusCodeAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_all_nodes_status_code_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_all_nodes_status_code_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Graph/AllNodes/StatusCode'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_all_nodes_status_code_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetAllNodesInLevelStatusCodeAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_all_nodes_status_code_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_all_nodes_status_code_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Graph/AllNodes/StatusCode'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_all_nodes_status_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetAllNodesInLevelStatusAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~swagger.models.TaskStatus] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_all_nodes_status_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{TaskStatus}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_all_nodes_status_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Graph/AllNodes/Status'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_all_nodes_status_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetAllNodesInLevelStatusAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~swagger.models.TaskStatus] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_all_nodes_status_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{TaskStatus}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_all_nodes_status_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Graph/AllNodes/Status'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_outputs_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetOutputsAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~swagger.models.NodeOutput] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_outputs_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{NodeOutput}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_outputs_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Outputs'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_outputs_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetOutputsAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~swagger.models.NodeOutput] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_outputs_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{NodeOutput}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_outputs_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Outputs'}

    def get_pipeline_run_output_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, pipeline_run_output_name, custom_headers=None, raw=False, **operation_config):
        """GetPipelineRunOutputAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param pipeline_run_output_name: The name of the pipeline run output
        :type pipeline_run_output_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: NodeOutput or ClientRawResponse if raw=true
        :rtype: ~swagger.models.NodeOutput or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.get_pipeline_run_output_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str'),
            'pipelineRunOutputName': self._serialize.url("pipeline_run_output_name", pipeline_run_output_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('NodeOutput', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pipeline_run_output_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/PipelineRunOutputs/{pipelineRunOutputName}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_node_status_code_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeStatusCodeAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: enum or ClientRawResponse if raw=true
        :rtype: str or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_node_status_code_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_node_status_code_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Graph/Node/StatusCode'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_node_status_code_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeStatusCodeAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: enum or ClientRawResponse if raw=true
        :rtype: str or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_node_status_code_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_node_status_code_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Graph/Node/StatusCode'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_node_status_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeStatusAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TaskStatus or ClientRawResponse if raw=true
        :rtype: ~swagger.models.TaskStatus or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_node_status_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TaskStatus', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_node_status_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Graph/Node/Status'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_node_status_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeStatusAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TaskStatus or ClientRawResponse if raw=true
        :rtype: ~swagger.models.TaskStatus or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_node_status_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TaskStatus', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_node_status_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Graph/Node/Status'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_stdout_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeShareableStdoutAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Stream or ClientRawResponse if raw=true
        :rtype: ~swagger.models.Stream or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_stdout_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        return bytes.decode(response.content)
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_stdout_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Graph/Shareable/STDOUT'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_stdout_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeShareableStdoutAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Stream or ClientRawResponse if raw=true
        :rtype: ~swagger.models.Stream or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_stdout_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        return bytes.decode(response.content)
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_stdout_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Graph/Shareable/STDOUT'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_stderr_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeShareableStderrAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Stream or ClientRawResponse if raw=true
        :rtype: ~swagger.models.Stream or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_stderr_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        return bytes.decode(response.content)
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_stderr_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Graph/Shareable/STDERR'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_stderr_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeShareableStderrAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Stream or ClientRawResponse if raw=true
        :rtype: ~swagger.models.Stream or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_stderr_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        return bytes.decode(response.content)
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_stderr_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Graph/Shareable/STDERR'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_job_log_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeShareableJobLogAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Stream or ClientRawResponse if raw=true
        :rtype: ~swagger.models.Stream or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_job_log_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        return bytes.decode(response.content)
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_by_pipeline_run_id_graph_shareable_job_log_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/{pipelineRunId}/Graph/Shareable/JobLog'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_job_log_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id, node_id_path=None, custom_headers=None, raw=False, **operation_config):
        """GetNodeShareableJobLogAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id: The pipeline run id
        :type pipeline_run_id: str
        :param node_id_path: The node id path
        :type node_id_path: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Stream or ClientRawResponse if raw=true
        :rtype: ~swagger.models.Stream or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_job_log_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunId': self._serialize.url("pipeline_run_id", pipeline_run_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if node_id_path is not None:
            body_content = self._serialize.body(node_id_path, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        return bytes.decode(response.content)
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_by_pipeline_run_id_graph_shareable_job_log_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/{pipelineRunId}/Graph/Shareable/JobLog'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_template_submit_by_template_id_post(
            self, subscription_id, resource_group_name, workspace_name, template_id, experiment_name=None, parameter_assignment=None, custom_headers=None, raw=False, **operation_config):
        """SubmitExperimentFromTemplateAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param template_id: The template id
        :type template_id: str
        :param experiment_name: The experiment name
        :type experiment_name: str
        :param parameter_assignment: Parameter assignment.
         If null, it will use defaults from the base experiment.
        :type parameter_assignment: dict[str, str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_template_submit_by_template_id_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'templateId': self._serialize.url("template_id", template_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if experiment_name is not None:
            query_parameters['experimentName'] = self._serialize.query("experiment_name", experiment_name, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if parameter_assignment is not None:
            body_content = self._serialize.body(parameter_assignment, '{str}')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_template_submit_by_template_id_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/TemplateSubmit/{templateId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_published_pipeline_submit_by_pipeline_id_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, experiment_name=None, parameter_assignment=None, custom_headers=None, raw=False, **operation_config):
        """SubmitExperimentFromPublishedPipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The published pipeline id
        :type pipeline_id: str
        :param experiment_name: The experiment name
        :type experiment_name: str
        :param parameter_assignment: Parameter assignment.
         If null, it will use defaults from the base pipeline run.
        :type parameter_assignment: dict[str, str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_published_pipeline_submit_by_pipeline_id_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if experiment_name is not None:
            query_parameters['experimentName'] = self._serialize.query("experiment_name", experiment_name, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if parameter_assignment is not None:
            body_content = self._serialize.body(parameter_assignment, '{str}')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_published_pipeline_submit_by_pipeline_id_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/PublishedPipelineSubmit/{pipelineId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_pipeline_submit_by_pipeline_id_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, pipeline_submission_info=None, custom_headers=None, raw=False, **operation_config):
        """SubmitPipelineRunFromPipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The pipeline id
        :type pipeline_id: str
        :param pipeline_submission_info: pipeline submission information
        :type pipeline_submission_info: ~swagger.models.PipelineSubmissionInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_pipeline_submit_by_pipeline_id_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_submission_info is not None:
            body_content = self._serialize.body(pipeline_submission_info, 'PipelineSubmissionInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_pipeline_submit_by_pipeline_id_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/PipelineSubmit/{pipelineId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_pipeline_submit_by_pipeline_id_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, parent_run_id=None, pipeline_submission_info=None, custom_headers=None, raw=False, **operation_config):
        """SubmitPipelineRunFromPipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The pipeline id
        :type pipeline_id: str
        :param parent_run_id: The id of the parent run of this pipeline,
         optional
        :type parent_run_id: str
        :param pipeline_submission_info: pipeline submission information
        :type pipeline_submission_info: ~swagger.models.PipelineSubmissionInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_pipeline_submit_by_pipeline_id_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if parent_run_id is not None:
            query_parameters['parentRunId'] = self._serialize.query("parent_run_id", parent_run_id, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_submission_info is not None:
            body_content = self._serialize.body(pipeline_submission_info, 'PipelineSubmissionInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_pipeline_submit_by_pipeline_id_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/PipelineSubmit/{pipelineId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_pipeline_by_pipeline_id_get(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, custom_headers=None, raw=False, **operation_config):
        """GetPipelineRunsByPipelineIdAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The pipeline id
        :type pipeline_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineRunEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_pipeline_by_pipeline_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineRunEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_experiments_pipeline_by_pipeline_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Experiments/Pipeline/{pipelineId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_pipeline_by_pipeline_id_get(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, custom_headers=None, raw=False, **operation_config):
        """GetPipelineRunsByPipelineIdAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The pipeline id
        :type pipeline_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineRunEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_pipeline_by_pipeline_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineRunEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_pipeline_by_pipeline_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/Pipeline/{pipelineId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_schedule_by_schedule_id_get(
            self, subscription_id, resource_group_name, workspace_name, schedule_id, custom_headers=None, raw=False, **operation_config):
        """GetPipelineRunsByScheduleIdAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param schedule_id: The schedule id
        :type schedule_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineRunEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_schedule_by_schedule_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'scheduleId': self._serialize.url("schedule_id", schedule_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineRunEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_schedule_by_schedule_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/Schedule/{scheduleId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_schedule_by_schedule_id_last_get(
            self, subscription_id, resource_group_name, workspace_name, schedule_id, custom_headers=None, raw=False, **operation_config):
        """GetLastPipelineRunForSchedule.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param schedule_id: The schedule id
        :type schedule_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_schedule_by_schedule_id_last_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'scheduleId': self._serialize.url("schedule_id", schedule_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 204]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_runs_schedule_by_schedule_id_last_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/Schedule/{scheduleId}/Last'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_create_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreatePipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_creation_info: The pipeline creation info
        :type pipeline_creation_info: ~swagger.models.PipelineCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_create_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)
        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_creation_info is not None:
            body_content = self._serialize.body(pipeline_creation_info, 'PipelineCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_create_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Pipelines/Create'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_get(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, custom_headers=None, raw=False, **operation_config):
        """GetPipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The pipeline id
        :type pipeline_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Pipelines/{pipelineId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_get(
            self, subscription_id, resource_group_name, workspace_name, active_only=None, custom_headers=None, raw=False, **operation_config):
        """GetPipelinesAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param active_only: Indicate whether to load active only
        :type active_only: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if active_only is not None:
            query_parameters['activeOnly'] = self._serialize.query("active_only", active_only, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Pipelines'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_view_get(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, custom_headers=None, raw=False, **operation_config):
        """GetPipelineViewAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The pipeline id
        :type pipeline_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineViewEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineViewEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_view_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineViewEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_view_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Pipelines/{pipelineId}/View'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_view_get(
            self, subscription_id, resource_group_name, workspace_name, active_only=None, custom_headers=None, raw=False, **operation_config):
        """GetPipelinesViewAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param active_only: Indicate whether to load active only
        :type active_only: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineViewEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_view_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if active_only is not None:
            query_parameters['activeOnly'] = self._serialize.query("active_only", active_only, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineViewEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_view_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Pipelines/View'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_status_put(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, new_status=None, custom_headers=None, raw=False, **operation_config):
        """UpdateStatusAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The pipeline id
        :type pipeline_id: str
        :param new_status: New status for the pipeline
        :type new_status: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_status_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if new_status is not None:
            body_content = self._serialize.body(new_status, 'str')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipelines_by_pipeline_id_status_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Pipelines/{pipelineId}/status'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_create_post(
            self, subscription_id, resource_group_name, workspace_name, schedule_creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreateScheduleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param schedule_creation_info: The schedule creation info
        :type schedule_creation_info: ~swagger.models.ScheduleCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineScheduleEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineScheduleEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_create_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if schedule_creation_info is not None:
            body_content = self._serialize.body(schedule_creation_info, 'ScheduleCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineScheduleEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_create_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Schedules/Create'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_by_schedule_id_get(
            self, subscription_id, resource_group_name, workspace_name, schedule_id, custom_headers=None, raw=False, **operation_config):
        """GetScheduleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param schedule_id: The schedule id
        :type schedule_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineScheduleEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineScheduleEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_by_schedule_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'scheduleId': self._serialize.url("schedule_id", schedule_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineScheduleEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_by_schedule_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Schedules/{scheduleId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_by_schedule_id_put(
            self, subscription_id, resource_group_name, workspace_name, schedule_id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdateScheduleAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param schedule_id: The schedule id
        :type schedule_id: str
        :param updated: The Schedule
        :type updated: ~swagger.models.PipelineScheduleEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineScheduleEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineScheduleEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_by_schedule_id_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'scheduleId': self._serialize.url("schedule_id", schedule_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'PipelineScheduleEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineScheduleEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_by_schedule_id_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Schedules/{scheduleId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_get(
            self, subscription_id, resource_group_name, workspace_name, active_only=None, custom_headers=None, raw=False, **operation_config):
        """GetSchedulesAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param active_only: Indicate whether to load active only
        :type active_only: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineScheduleEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if active_only is not None:
            query_parameters['activeOnly'] = self._serialize.query("active_only", active_only, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineScheduleEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Schedules'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_pipeline_by_pipeline_endpoint_id_get(
            self, subscription_id, resource_group_name, workspace_name, pipeline_endpoint_id, custom_headers=None, raw=False, **operation_config):
        """GetSchedulesByPipelineEndpointIdAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_endpoint_id: The published pipeline endpoint id
        :type pipeline_endpoint_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineScheduleEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_pipeline_by_pipeline_endpoint_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineEndpointId': self._serialize.url("pipeline_endpoint_id", pipeline_endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineScheduleEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_pipeline_by_pipeline_endpoint_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Schedules/PipelineEndpoint/{pipelineEndpointId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_pipeline_by_pipeline_id_get(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id, custom_headers=None, raw=False, **operation_config):
        """GetSchedulesByPipelineIdAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id: The published pipeline id
        :type pipeline_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineScheduleEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_pipeline_by_pipeline_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineId': self._serialize.url("pipeline_id", pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineScheduleEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_schedules_pipeline_by_pipeline_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Schedules/Pipeline/{pipelineId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_create_post(
            self, subscription_id, resource_group_name, workspace_name, pipeline_endpoint_creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreatePipelineEndpointAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_endpoint_creation_info: The pipeline endpoint creation info
        :type pipeline_endpoint_creation_info: ~swagger.models.PipelineEndpointCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineEndpointEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineEndpointEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_create_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_endpoint_creation_info is not None:
            body_content = self._serialize.body(pipeline_endpoint_creation_info, 'PipelineEndpointCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineEndpointEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_create_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineEndpoints/Create'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_id_get(
            self, subscription_id, resource_group_name, workspace_name, endpoint_id=None, custom_headers=None, raw=False, **operation_config):
        """GetPipelineEndpointByIdAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param endpoint_id: id of pipelineEndpoint
        :type endpoint_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineEndpointEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineEndpointEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'Id': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineEndpointEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineEndpoints/Id/{Id}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_name_get(
            self, subscription_id, resource_group_name, workspace_name, name=None, custom_headers=None, raw=False, **operation_config):
        """GetPipelineEndpointByNameAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param name: name of pipelineEndpoint
        :type name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineEndpointEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineEndpointEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_name_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if name is not None:
            query_parameters['Name'] = self._serialize.query("Name", name, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineEndpointEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_name_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineEndpoints/Name'}



    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_id_put(
            self, subscription_id, resource_group_name, workspace_name, endpoint_id, updated=None, custom_headers=None, raw=False, **operation_config):
        """UpdatePipelineEndpointAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param endpoint_id: The pipelineEndpoint id
        :type endpoint_id: str
        :param updated: The PipelineEndpoint
        :type updated: ~swagger.models.PipelineEndpointEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineEndpointEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineEndpointEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_id_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'endpoint_id': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if updated is not None:
            body_content = self._serialize.body(updated, 'PipelineEndpointEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineEndpointEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_by_id_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineEndpoints/{endpoint_id}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoints_get(
            self, subscription_id, resource_group_name, workspace_name, active_only=None, custom_headers=None, raw=False, **operation_config):
        """GetPipelineEndpointsAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param active_only: Indicate whether to load active only
        :type active_only: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.TemplateEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoints_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if active_only is not None:
            query_parameters['activeOnly'] = self._serialize.query("active_only", active_only, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineEndpointEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoints_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineEndpoints'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_submit_by_pipeline_run_id_post(
            self, subscription_id, resource_group_name, workspace_name, id, parent_run_id=None,
            pipeline_submission_info=None, pipeline_version=None, custom_headers=None, raw=False, **operation_config):
        """SubmitPipelineRunFromPipelineEndpointByIdAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The pipelineEndpoint id
        :type id: str
        :param parent_run_id: The id of the parent run of this pipeline run,
         optional
        :type parent_run_id: str
        :param pipeline_submission_info: pipeline submission information
        :type pipeline_submission_info: ~swagger.models.PipelineSubmissionInfo
        :param pipeline_version: pipeline version, optional parameter
        :type pipeline_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_submit_by_pipeline_run_id_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if parent_run_id is not None:
            query_parameters['parentRunId'] = self._serialize.query("parent_run_id", parent_run_id, 'str')
        if pipeline_version is not None:
            query_parameters['pipelineVersion'] = self._serialize.query("pipeline_version", pipeline_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_submission_info is not None:
            body_content = self._serialize.body(pipeline_submission_info, 'PipelineSubmissionInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoint_submit_by_pipeline_run_id_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/PipelineEndpointSubmit/Id/{id}'}

    def api_v10_subscriptions_by_subscription_id_resource_group_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoints_by_id_pipelines_get(
        self, subscription_id, resource_group_name, workspace_name, id, active_only=True, custom_headers=None,
        raw=False, **operation_config):
        """GetPipelinesAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The pipelineEndpoint id
        :type id: str
        :param active_only: Indicate whether to load active only
        :type active_only: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_group_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoints_by_id_pipelines_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if active_only is not None:
            query_parameters['activeOnly'] = self._serialize.query("active_only", active_only, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_group_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_pipeline_endpoints_by_id_pipelines_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineEndpoints/{id}/pipelines'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_create_post(
            self, subscription_id, resource_group_name, workspace_name, template_creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreateTemplateAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param template_creation_info: The template creation info
        :type template_creation_info: ~swagger.models.TemplateCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TemplateEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.TemplateEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_create_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if template_creation_info is not None:
            body_content = self._serialize.body(template_creation_info, 'TemplateCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TemplateEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_create_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Templates/Create'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_create_post(
            self, subscription_id, resource_group_name, workspace_name, template_creation_info=None, custom_headers=None, raw=False, **operation_config):
        """CreatePublishedPipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param template_creation_info: The template creation info
        :type template_creation_info: ~swagger.models.TemplateCreationInfo
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TemplateEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.TemplateEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_create_post.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if template_creation_info is not None:
            body_content = self._serialize.body(template_creation_info, 'TemplateCreationInfo')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TemplateEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_create_post.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PublishedPipelines/Create'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_by_template_id_get(
            self, subscription_id, resource_group_name, workspace_name, template_id, custom_headers=None, raw=False, **operation_config):
        """GetTemplateAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param template_id: The template id
        :type template_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TemplateEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.TemplateEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_by_template_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'templateId': self._serialize.url("template_id", template_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TemplateEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_by_template_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Templates/{templateId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_by_published_pipeline_id_get(
            self, subscription_id, resource_group_name, workspace_name, published_pipeline_id, custom_headers=None, raw=False, **operation_config):
        """GetPublishedPipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param published_pipeline_id: The published pipeline id
        :type published_pipeline_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TemplateEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.TemplateEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_by_published_pipeline_id_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'publishedPipelineId': self._serialize.url("published_pipeline_id", published_pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TemplateEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_by_published_pipeline_id_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PublishedPipelines/{publishedPipelineId}'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_get(
            self, subscription_id, resource_group_name, workspace_name, active_only=None, custom_headers=None, raw=False, **operation_config):
        """GetPublishedPipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param active_only: Indicate whether to load active only
        :type active_only: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.TemplateEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if active_only is not None:
            query_parameters['activeOnly'] = self._serialize.query("active_only", active_only, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[TemplateEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_get.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PublishedPipelines'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_by_template_id_status_put(
            self, subscription_id, resource_group_name, workspace_name, template_id, new_status=None, custom_headers=None, raw=False, **operation_config):
        """UpdateStatusAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param template_id: The template id
        :type template_id: str
        :param new_status: New status for the template
        :type new_status: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_by_template_id_status_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'templateId': self._serialize.url("template_id", template_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if new_status is not None:
            body_content = self._serialize.body(new_status, 'str')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_templates_by_template_id_status_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Templates/{templateId}/status'}

    def api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_by_published_pipeline_id_status_put(
            self, subscription_id, resource_group_name, workspace_name, published_pipeline_id, new_status=None, custom_headers=None, raw=False, **operation_config):
        """UpdateStatusAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param published_pipeline_id: The published pipeline id
        :type published_pipeline_id: str
        :param new_status: New status for the published pipeline
        :type new_status: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_by_published_pipeline_id_status_put.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'publishedPipelineId': self._serialize.url("published_pipeline_id", published_pipeline_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if new_status is not None:
            body_content = self._serialize.body(new_status, 'str')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    api_v10_subscriptions_by_subscription_id_resource_groups_by_resource_group_name_providers_microsoft_machine_learning_services_workspaces_by_workspace_name_published_pipelines_by_published_pipeline_id_status_put.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PublishedPipelines/{publishedPipelineId}/status'}

    def create_pipeline_draft_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_draft=None, custom_headers=None, raw=False, **operation_config):
        """CreatePipelineDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_draft: The pipeline draft
        :type pipeline_draft: ~swagger.models.PipelineDraftEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.create_pipeline_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_draft is not None:
            body_content = self._serialize.body(pipeline_draft, 'PipelineDraftEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_pipeline_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineDrafts/Create'}

    def get_pipeline_draft_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_draft_id, custom_headers=None, raw=False, **operation_config):
        """GetPipelineDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_draft_id: The pipeline draft id
        :type pipeline_draft_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.get_pipeline_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineDraftId': self._serialize.url("pipeline_draft_id", pipeline_draft_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pipeline_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineDrafts/{pipelineDraftId}'}

    def save_pipeline_draft_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_draft_id, pipeline_draft=None, custom_headers=None, raw=False, **operation_config):
        """SavePipelineDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_draft_id: The pipeline draft id
        :type pipeline_draft_id: str
        :param pipeline_draft: PipelineDraftEntity to save
        :type pipeline_draft: ~swagger.models.PipelineDraftEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.save_pipeline_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineDraftId': self._serialize.url("pipeline_draft_id", pipeline_draft_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_draft is not None:
            body_content = self._serialize.body(pipeline_draft, 'PipelineDraftEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    save_pipeline_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineDrafts/{pipelineDraftId}'}

    def delete_pipeline_draft_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_draft_id, pipeline_draft=None, custom_headers=None, raw=False, **operation_config):
        """DeletePipelineDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_draft_id: The pipeline draft id
        :type pipeline_draft_id: str
        :param pipeline_draft: The pipeline draft
        :type pipeline_draft: ~swagger.models.PipelineDraftEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.delete_pipeline_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineDraftId': self._serialize.url("pipeline_draft_id", pipeline_draft_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_draft is not None:
            body_content = self._serialize.body(pipeline_draft, 'PipelineDraftEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_pipeline_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineDrafts/{pipelineDraftId}'}

    def list_pipeline_drafts_async(
            self, subscription_id, resource_group_name, workspace_name, tag_filters=None, custom_headers=None, raw=False, **operation_config):
        """ListPipelineDraftsAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param tag_filters: Dictionary of tag=value assignments to filter on
        :type tag_filters: dict[str, str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~swagger.models.PipelineDraftEntity] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.list_pipeline_drafts_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if tag_filters is not None:
            body_content = self._serialize.body(tag_filters, '{str}')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[PipelineDraftEntity]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_pipeline_drafts_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineDrafts'}

    def clone_from_pipeline_run_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_run_id_to_clone, custom_headers=None, raw=False, **operation_config):
        """CloneFromPipelineRunAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_run_id_to_clone: The pipeline run id to clone
        :type pipeline_run_id_to_clone: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.clone_from_pipeline_run_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineRunIdToClone': self._serialize.url("pipeline_run_id_to_clone", pipeline_run_id_to_clone, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    clone_from_pipeline_run_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineDrafts/ClonePipelineRun/{pipelineRunIdToClone}'}

    def clone_from_published_pipeline_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_id_to_clone, custom_headers=None, raw=False, **operation_config):
        """CloneFromPublishedPipelineAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_id_to_clone: The published pipeline id to clone
        :type pipeline_id_to_clone: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.clone_from_published_pipeline_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineIdToClone': self._serialize.url("pipeline_id_to_clone", pipeline_id_to_clone, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    clone_from_published_pipeline_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineDrafts/ClonePublished/{pipelineIdToClone}'}

    def clone_from_pipeline_draft_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_draft_id_to_clone, custom_headers=None, raw=False, **operation_config):
        """CloneFromPipelineDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_draft_id_to_clone: The pipeline draft id to clone
        :type pipeline_draft_id_to_clone: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.clone_from_pipeline_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'pipelineDraftIdToClone': self._serialize.url("pipeline_draft_id_to_clone", pipeline_draft_id_to_clone, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    clone_from_pipeline_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineDrafts/Clone/{pipelineDraftIdToClone}'}

    def submit_pipeline_run_from_pipeline_draft_async(
            self, subscription_id, resource_group_name, workspace_name, parent_run_id=None, pipeline_draft=None, custom_headers=None, raw=False, **operation_config):
        """SubmitPipelineRunFromPipelineDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param parent_run_id: The id of the parent run of this pipeline run,
         optional
        :type parent_run_id: str
        :param pipeline_draft: The pipeline draft to submit
        :type pipeline_draft: ~swagger.models.PipelineDraftEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineRunEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineRunEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.submit_pipeline_run_from_pipeline_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if parent_run_id is not None:
            query_parameters['parentRunId'] = self._serialize.query("parent_run_id", parent_run_id, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_draft is not None:
            body_content = self._serialize.body(pipeline_draft, 'PipelineDraftEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineRunEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    submit_pipeline_run_from_pipeline_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineRuns/PipelineDraftSubmit'}

    def create_pipeline_from_pipeline_draft_async(
            self, subscription_id, resource_group_name, workspace_name, pipeline_draft=None, custom_headers=None, raw=False, **operation_config):
        """CreatePipelineFromPipelineDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param pipeline_draft: The pipeline draft
        :type pipeline_draft: ~swagger.models.PipelineDraftEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PipelineEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.PipelineEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.create_pipeline_from_pipeline_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if pipeline_draft is not None:
            body_content = self._serialize.body(pipeline_draft, 'PipelineDraftEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PipelineEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_pipeline_from_pipeline_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/Pipelines/PipelineDraftCreate'}

    def get_graph_draft_async(
            self, subscription_id, resource_group_name, workspace_name, id, custom_headers=None, raw=False, **operation_config):
        """GetGraphDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The graph draft id
        :type id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GraphDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.GraphDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.get_graph_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GraphDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_graph_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/GraphDrafts/{id}'}

    def update_graph_draft_async(
            self, subscription_id, resource_group_name, workspace_name, id, graph_draft=None, custom_headers=None, raw=False, **operation_config):
        """UpdateGraphDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The graph draft id
        :type id: str
        :param graph_draft: The graph draft to update
        :type graph_draft: ~swagger.models.GraphDraftEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GraphDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.GraphDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.update_graph_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if graph_draft is not None:
            body_content = self._serialize.body(graph_draft, 'GraphDraftEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GraphDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    update_graph_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/GraphDrafts/{id}'}

    def delete_graph_draft_async(
            self, subscription_id, resource_group_name, workspace_name, id, graph_draft=None, custom_headers=None, raw=False, **operation_config):
        """DeleteGraphDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param id: The graph draft id
        :type id: str
        :param graph_draft: The graph draft
        :type graph_draft: ~swagger.models.GraphDraftEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.delete_graph_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if graph_draft is not None:
            body_content = self._serialize.body(graph_draft, 'GraphDraftEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_graph_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/GraphDrafts/{id}'}

    def create_graph_draft_async(
            self, subscription_id, resource_group_name, workspace_name, graph_draft=None, custom_headers=None, raw=False, **operation_config):
        """CreateGraphDraftAsync.

        :param subscription_id: The subscription id
        :type subscription_id: str
        :param resource_group_name: The resource group name
        :type resource_group_name: str
        :param workspace_name: The workspace name
        :type workspace_name: str
        :param graph_draft: The graph draft to create
        :type graph_draft: ~swagger.models.GraphDraftEntity
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GraphDraftEntity or ClientRawResponse if raw=true
        :rtype: ~swagger.models.GraphDraftEntity or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException`
        """
        # Construct URL
        url = self.create_graph_draft_async.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if graph_draft is not None:
            body_content = self._serialize.body(graph_draft, 'GraphDraftEntity')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GraphDraftEntity', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_graph_draft_async.metadata = {'url': '/pipelines/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/GraphDrafts'}
